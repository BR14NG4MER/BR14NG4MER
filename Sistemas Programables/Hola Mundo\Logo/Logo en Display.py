"""
Alumno: Nava Villagrana Brian Ulises
No. Control: 19211692
Practica: Logo en Display
Lenguaje: MicroPython
"""

from machine import Pin, I2C
from ssd1306 import SSD1306_I2C
import framebuf, sys
import utime

pix_res_x = 128
pix_res_y = 64

def init_i2c(scl_pin, sda_pin):
    # Initialize I2C device
    i2c_dev = I2C(1, scl=Pin(scl_pin), sda=Pin(sda_pin), freq=200000)
    i2c_addr = [hex(ii) for ii in i2c_dev.scan()]
    
    if not i2c_addr:
        print('No I2C Display Found')
        sys.exit()
    else:
        print("I2C Address      : {}".format(i2c_addr[0]))
        print("I2C Configuration: {}".format(i2c_dev))
    
    return i2c_dev

def display_logo(oled):
    # Display the Raspberry Pi logo on the OLED
    plain_bytes=[
        	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0x3f, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x1e, 0x1c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8e, 0x18, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x84, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x86, 0x30, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc6, 0x30, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x02, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0x40, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x78, 0x07, 0x87, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xfc, 0x9f, 0xc7, 0xff, 0xff, 
	0xff, 0xff, 0xf3, 0xee, 0x9b, 0xe7, 0xff, 0xff, 0xf9, 0xff, 0xf3, 0xee, 0x9d, 0xe3, 0xff, 0xff, 
	0xfc, 0x03, 0xf3, 0xee, 0x99, 0xf3, 0xf0, 0x1f, 0xff, 0x00, 0xf3, 0xe0, 0xc3, 0xf3, 0x80, 0x3f, 
	0xff, 0x00, 0x33, 0xff, 0xff, 0xe7, 0x00, 0xff, 0xff, 0xc0, 0x73, 0xff, 0xff, 0xe6, 0x01, 0xff, 
	0xff, 0xe0, 0xf1, 0xff, 0xff, 0xc7, 0x03, 0xff, 0xff, 0xe0, 0xe0, 0xff, 0xff, 0x8b, 0x07, 0xff, 
	0xff, 0xfe, 0x64, 0x7f, 0xff, 0x12, 0x1f, 0xff, 0xff, 0xfe, 0x16, 0x3f, 0xfe, 0x30, 0x7f, 0xff, 
	0xff, 0xff, 0x86, 0x1f, 0xfc, 0x19, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xf8, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x07, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xf0, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0xe3, 0xe3, 0x81, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xf9, 0xc7, 0xc1, 0xff, 0xff, 
	0xff, 0xff, 0xe1, 0xf8, 0x8f, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xfc, 0x8f, 0xe3, 0xff, 0xff, 
	0xff, 0xff, 0xf1, 0xfc, 0x9f, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xfc, 0x1f, 0xc7, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0xf8, 0x0f, 0x87, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x70, 0x07, 0x9f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x70, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x88, 0x08, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x04, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0x0d, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    ]
    fb = framebuf.FrameBuffer(bytearray(plain_bytes), 64, 64, framebuf.MONO_HLSB)
    
    oled.fill(0)
    oled.blit(fb, 32, 0)
    oled.show()

def display_text(oled, text, x, y):
    # Limpia la pantalla
    oled.fill(0)
    # Muestra el texto en la posici√≥n (x, y)
    oled.text(text, x, y)
    oled.show()

def main():
    i2c_dev = init_i2c(scl_pin=27, sda_pin=26)
    oled = SSD1306_I2C(pix_res_x, pix_res_y, i2c_dev)
	
    display_logo(oled)

if __name__ == '__main__':
    main()
